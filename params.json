{"name":"Client require","tagline":"NPM modules packaged with a CommonJS module interface and served synchronously to the client.","body":"# Client Require\r\n\r\nThis library allows you to run your Node.JS application on the client side using\r\nstandard CommonJS module syntax.  It supports loading client files from\r\ndependency NPM packages and easily branching between client and server modules\r\nwhen necessary.\r\n\r\nIn development mode, loaded package files will present error messages in the\r\nbrowser which match the filename and line number of the related server-side\r\nfile.\r\n\r\nIn production mode, packages will be placed within a single closure with no\r\nleaking scope.\r\n\r\n## Reading Manuals is for Nerds!\r\n\r\nTo play around with a demo repository which loads jQuery from NPM in a\r\nconstrained namespace along with two other NPM modules (uuid-v4 and sillynames), \r\nvisit <http://github.com/Yuffster/client_require_demo>.\r\n\r\n## Credits\r\n\r\nCopyright 2012-2013 by Michelle Steigerwalt <http://msteigerwalt.com> and licensed\r\nunder the MIT license.\r\n\r\nIf you find this library useful, please let me know!\r\n\r\n### Built Using\r\n\r\n* [LAB.js](http://labjs.com/) by Getify Solutions <http://getify.com/>\r\n* [UglifyJS](http://marijn.haverbeke.nl/uglifyjs) by Mihai Bazon \r\n<http://mihai.bazon.net/blog>\r\n\r\n## Using Modules\r\n\r\nIn your package.json, list your dependencies as you normally would, and add an\r\nadditional configuration field called \"client_dependencies\", which is a list of\r\nmodule names.\r\n\r\n\t{\r\n\t\t\"main\": \"app.js\",\r\n\t\t\"dependencies\": {\r\n\t\t\t\"client_require\": \"*\",\r\n\t\t\t\"uuid-v4\": \"*\"\r\n\t\t}\r\n\t\t\"client_dependencies\": ['uuid-v4']\r\n\t}\r\n\r\nType `npm install` as usual to install the dependencies.\r\n\r\n### Vanilla Node.js\r\n\r\nIn your Node.js app, pass requests as they come in to client_require.handle.\r\n\r\n\tvar client_require = require('client_require');\r\n\r\n\tvar http = require('http');\r\n\tvar app  = http.createServer(function(req,res) {\r\n\t\t//Let client_require try to handle this if it can.\r\n\t\tif (client_require.handle(req,res)) return;\r\n\t\t//Otherwise, handle it as usual.\r\n\t\tres.write(\"Hello, world!\");\r\n\t\t//Don't forget to add the script tag that loads all the other scripts!\r\n\t\tres.end('<script src=\"'+client_require.get_src+'\"></script>');\r\n\t});\r\n\r\n\tapp.listen(3000, 'localhost');\r\n\r\n### Connect Middleware\r\n\r\nIf you're using Connect, you can use the .connect() handler instead.\r\n\r\n\tapp.use(require('client_require').connect());\r\n\r\n### Loading the Scripts\r\n\r\nTo load all your scripts in development and production mode, just require the\r\nbase include, which by default is `/js/client_require.js`.  It's best to place\r\nthis file at the **end of your document**, so the module can load all necessary \r\nscript files in a nonblocking manner.\r\n\r\n\t<script src=\"/js/client_require.js\"></script>\r\n\r\n## Packaging Modules for the Client\r\n\r\nWhen client_require looks through your node_module, it will open up your\r\npackage.json file and look for a `client_require` key, which should point to\r\nwhere your main files live (and you're either using client/server \r\ndifferentiation or aren't calling server-side Node modules).  \r\n\r\nIf you don't have a `client_require` key, but do have a `main` key,\r\nclient_require will load the file specified (but no others which might be\r\nrequired within the main module).\r\n\r\n## Configuration\r\n\r\nTo change the default settings of client_require, you can use the `.set()` \r\nfunction.\r\n\r\n\tvar client_require = require('client_require');\r\n\r\n\tclient_require.set('web_root', '/assets/scripts/');\r\n\r\n### Options\r\n\r\n#### web_root\r\n\r\nDefaults to `/js/`.\r\n\r\nThis will be appended to all script srcs, and only requests\r\nwith a path which starts with this string will be served.\r\n\r\n#### include_file\r\n\r\nDefaults to `client_require.js`.\r\n\r\nThe main file which will then load all other necessary scripts.\r\n\r\n#### app_root\r\n\r\nDefaults to `process.env.PWD` (the directory in which you type the `node` \r\ncommand to launch the webserver).\r\n\r\nclient_require will start by indexing all JavaScript files within this file and\r\nall dependent files listed in the package.json in this directory.\r\n\r\n#### env\r\n\r\nDefaults to `process.env.NODE_ENV` or 'development'.  If your server is in \r\ndevelopment mode, all modules will be served as their own file.  In production,\r\nall files will be packaged into one JavaScript file.\r\n\r\n### uglify\r\n\r\nDefaults to `true`.  When set to true, production code will be minified\r\nusing the NPM module for [Uglify](http://marijnhaverbeke.nl//uglifyjs).\r\n\r\n## Client/Server Alternation\r\n\r\nIf you want to have separate versions of particular files for the client and \r\nthe server, you can do so by placing the module in a directory called client/\r\nor server/, respectively.\r\n\r\nExample:\r\n\r\n\tserver/\r\n\t\tapp.js\r\n\tclient/\r\n\t\tapp.js\r\n\r\nThis will create a module file at the root path `app.js`. client/app.js will\r\nbe loaded on the client and server/app.js will be loaded on the server.\r\n\r\nOn the server-side, you must use the `require` method exported by the library\r\nto properly load server-side files.\r\n\r\n## API Methods\r\n\r\n### connect\r\n\r\nWhen called as a function, this will return a Connect module, which can be \r\nattached to any Connect application.\r\n\r\n\tapp.use(client_require.connect());\r\n\r\n### handle\r\n\r\nYou can pass a request object to client_require.handle within your HTTP request\r\nhandler.  If the request matches client_require's web_path, the handle\r\nmethod will return true, and a response will be sent once it's available.\r\n\r\n\tif (client_require.handle(req,res)) return;\r\n\r\n### require\r\n\r\nThis is useful on the server-side, as the standard `require` function is not\r\nable to be overloaded.  This will make sure you load server/foo.js when there\r\nis no root foo.js available, which mimicks the client-side functionality.\r\n\r\n### set\r\n\r\nSets a configuration key to the provided value.\r\n\r\n\tclient_require.set('app_root', __dirname);\r\n\r\n### get_src\r\n\r\nReturns the web-accessible path to the main application JavaScript, which will\r\nin turn load all other modules.\r\n\r\n\tres.write('<script src=\"'+client_require.get_src()+'\"></script>');","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}